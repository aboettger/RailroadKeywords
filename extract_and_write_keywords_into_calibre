#!/bin/bash

# Trap the INT signal (ctrl-c, for example)
trap trapint 2

# Absolute path to this script, e.g. /home/user/bin/foo.sh
script=$(readlink -f "$0")
# Absolute path this script is in, thus /home/user/bin
script_path=$(dirname "$script")

# START functions ##############################################################

cfg_log_level=$(look log_level "$script_path"/main.cfg | cut -d '=' -f 2-)
. "$script_path/libraries/logging.sh" "$cfg_log_level"

cfg_dry_run=$(look dry_run "$script_path"/main.cfg | cut -d '=' -f 2-)
if [[ -z $cfg_dry_run ]]; then
  cfg_dry_run=0
fi

function trapint {
  echo
  echo
  echo "$(basename "$0") SIGINT received"
  cleanup
}

function cleanup {
  logInfo "Cleaning up…"
  rm "$HOME/running/$script_name.pid"
  logInfo "Bye."
  echo
  exit 1
}

if [[ ! -f $script_path/main.cfg ]]; then
  logWarn "Keine Konfigurationsdatei \"$script_path/main.cfg\" gefunden. Versuche eine Konfiguration aus \"$script_path/main.cfg.template\" zu erstellen."
  cp "$script_path"/main.cfg.template "$script_path"/main.cfg
fi
if [[ ! -f $script_path/main.cfg ]]; then
  logError "Keine Konfigurationsdatei \"$script_path/main.cfg\" gefunden."
  cleanup
  exit 1
fi

function save_pid {
  script_name=$(basename "$0")
  if [ ! -d "$HOME/running/" ]; then
    mkdir "$HOME/running/"
  fi

  if [ -f "$HOME/running/$script_name.pid" ]; then
    logError "$script_name is already running ($HOME/running/$script_name.pid)"
    exit 1
  else
    echo $$ > "$HOME/running/$script_name.pid"
  fi
}

save_pid

# notify-send "$(basename "$0")" "start"

if [ -f "$1" ]; then
  search_root=$(dirname "$1")
else
  search_root="$1"
fi

if [ "$search_root" == "." ]; then
  search_root=$(pwd)
fi

logInfo "Suche Calibre-DB (metadata.db)…"

calibreDbSearchPath="$search_root"
while [ ! -f "$calibreDbSearchPath/metadata.db" ] && [ "$calibreDbSearchPath" != "/" ]; do
  logInfo "$calibreDbSearchPath"
  calibreDbSearchPath=$(dirname "$calibreDbSearchPath")
done

if [ -f "$calibreDbSearchPath/metadata.db" ]; then
  logDebug "Calibre-DB (metadata.db) gefunden: \"$calibreDbSearchPath/metadata.db\""
else
  logError "Calibre-DB (metadata.db) nicht gefunden"
  cleanup
  exit 1
fi

all_pdfs=$(find "$search_root" -type f -name '*.pdf')
all_pdfs_count=$(wc -l <<< "$all_pdfs")
pdf_counter=0

while read -r pdf_path; do
  pdf_counter=$((pdf_counter+1))
  time_complete_a=$(($(date +%s%N)/1000000))

  working_path=$(dirname "$pdf_path")
  metadata_path="$working_path/metadata.opf"
  if [ ! -f "$metadata_path" ]; then
    echo "$metadata_path not found" 1>&2
  else
    calibre_id=$(xpath -q -e "//package/metadata/dc:identifier[@id='calibre_id']/text()" "$metadata_path")

    logInfo "Processing: $working_path"

    # pattern_files="$script_path/pattern/*"
    # for pattern_path in $pattern_files; do
    #   keywords=$("$script_path/60road_keywords_from_pdf" run "$pattern_path" "$pdf_path")
    #   keywords=${keywords//Baureihe/BR}
    #   false_positive_pattern_path="$script_path/false_positive/$(basename "$pattern_path")"
    #   if [ -f "$false_positive_pattern_path" ]; then
    #     false_positive_pattern=$(grep "^$calibre_id=" "$false_positive_pattern_path" | gawk  -F "$calibre_id=" '{print $2}')
    #     false_positive_pattern=$(echo "$false_positive_pattern" | sed -e 's/(/\\(/g' | sed -e 's/)/\\)/g' | sed -e 's/{/\\{/g' | sed -e 's/}/\\}/g' | sed -e 's/|/\\|/g')
    #     if [ ! -z "$false_positive_pattern" ]; then
    #       keywords=$(echo "$keywords" | sed -e "s/$false_positive_pattern/,/g")
    #       keywords=$(echo "$keywords" | sed -e "s/,,/,/g" | sed -e "s/^,//g" | sed -e "s/,$//g")
    #     fi
    #   fi
    # done

    # keywords=$(find "$script_path/pattern" -type f -name '*.pattern' | {
    #   while read -r pattern_path; do
    #     keywords=$("$script_path/60road_keywords_from_pdf" run "$pattern_path" "$pdf_path")
    #     keywords=${keywords//Baureihe/BR}
    #     false_positive_pattern_path="$script_path/false_positive/$(basename "$pattern_path")"
    #     if [ -f "$false_positive_pattern_path" ]; then
    #       false_positive_pattern=$(grep "^$calibre_id=" "$false_positive_pattern_path" | gawk  -F "$calibre_id=" '{print $2}')
    #       if [ ! -z "$false_positive_pattern" ]; then
    #         false_positive_pattern=$(echo "$false_positive_pattern" | sed -e 's/(/\\(/g' | sed -e 's/)/\\)/g' | sed -e 's/{/\\{/g' | sed -e 's/}/\\}/g' | sed -e 's/|/\\|/g')
    #         keywords=$(echo "$keywords" | sed -e "s/$false_positive_pattern/,/g")
    #       fi
    #     fi
    #     echo "$keywords"
    #   done
    # })
    # pdf_dirname=$(dirname "$pdf_path")
    # echo "$pdf_dirname"
    pdf_filename=$(basename "$pdf_path")
    pdf_filename="${pdf_filename%.*}"
    # if [[ -f $pdf_dirname/$pdf_filename.compressed.txt ]]; then
    #   logInfo "Dateigöße ($pdf_filename.compressed.txt): $(stat -c%s "$pdf_dirname/$pdf_filename.compressed.txt")"
    # fi

    cfg_pattern_files=$(look pattern_files "$script_path"/main.cfg | cut -d '=' -f 2-)

    keywords=$("$script_path/create_railroad_keywords_from_pdf" run "$script_path/pattern" "$pdf_path")

    if [[ -z $cfg_pattern_files ]]; then
      pattern_files="$script_path/pattern/*.pattern"
    else
      script_path_escaped=${script_path////\\/}
      pattern_files=$(sed -e 's/[[:space:]]//g' <<< "$cfg_pattern_files" | sed -e "s/,/\\n/g" | sed -e "s/^/$script_path_escaped\/pattern\//g")
    fi

    for pattern_path in $pattern_files; do
      false_positive_pattern_path="$script_path/false_positive/$(basename "$pattern_path")"
        if [ -f "$false_positive_pattern_path" ]; then
          false_positive_pattern=$(grep "^$calibre_id=" "$false_positive_pattern_path" | gawk  -F "$calibre_id=" '{print $2}')
          while read -r pattern; do
            if [ ! -z "$pattern" ]; then
              logInfo "Falscher Treffer wird entfernt durch \"$pattern\", definiert in \"$false_positive_pattern_path\"."
              pattern=$(sed -e 's/(/\\(/g' <<< "$pattern" | sed -e 's/)/\\)/g' | sed -e 's/{/\\{/g' | sed -e 's/}/\\}/g' | sed -e 's/|/\\|/g')
              keywords=$(sed -e "s/$pattern//g" <<< "$keywords")
              keywords=$(sed -e "s/,,/,/g" <<< "$keywords" | sed -e "s/^,//g" | sed -e "s/,\$//g" | sed -e 's/ \- /-/g')
            fi
          done <<< "$false_positive_pattern"
        fi
    done

    # logInfo "Processing: $pdf_path"
    # keywords=${keywords//Baureihe/BR}
    # keywords=$(echo "$keywords" | sort | sed -e "s/,,/,/g" | sed -e "s/^,//g" | sed -e "s/,$//g" | sed -E 's/(V)[[:space:]]([0-9])/\1\2/g' | sed -E 's/(VT)[[:space:]]([0-9])/\1\2/g' | sed -E 's/(E)[[:space:]]([0-9])/\1\2/g' | sed -E 's/(S)([0-9])/\1 \2/g' | uniq | tr '\n' ',' | sed -e 's/^,//g' | sed -e 's/,$//g' | sed -e 's/,{2,}//' | sed -e 's/ \- /-/g')
    # make_another_dot=$(python -c 'print u"\u0323".encode("utf8")')

    old_keywords=$(calibredb show_metadata "$calibre_id"  --library-path="$calibreDbSearchPath" | grep "Tags" | awk -F: '{print $2}' | sed -e 's/^ *//' | sed -e 's/ *$//' | sed -e 's/, /,/g' )

    cfg_remove_not_found=$(look remove_not_found "$script_path"/main.cfg | cut -d '=' -f 2-)
    if [[ $cfg_remove_not_found == "0" ]]; then
      old_keywords_list=$(tr ',' "\n" <<< "$old_keywords")
      keywords="$keywords,$old_keywords_list"
      keywords=$(tr ',' "\n" <<< "$keywords")
    fi
    
    keywords=$(sort  <<< "$keywords" | uniq)
    keywords=$(tr '\n' ',' <<< "$keywords" | sed -e 's/^,//g' | sed -e 's/,$//g' | sed -e 's/,{2,}//')

    temp_file_keywords=$(tempfile)
    temp_file_old_keywords=$(tempfile)

    tr ',' '\n' <<< "$keywords" > "$temp_file_keywords"
    tr ',' '\n' <<< "$old_keywords" > "$temp_file_old_keywords"

    logDebug "$keywords"
    keywords_diff=$(diff "$temp_file_old_keywords" "$temp_file_keywords" | tee >(grep "<") >(grep ">") > /dev/null 2>&1)
    echo "$keywords_diff"

    rm "$temp_file_keywords"
    rm "$temp_file_old_keywords"

    # echo "Tags alt: >$old_keywords<"
    # echo "Tags neu: >$keywords<"
    if [[ $old_keywords != "$keywords" ]] && [[ $cfg_dry_run == "0" ]]; then
      calibredb set_metadata --field tags:"$keywords" "$calibre_id" --library-path="$calibreDbSearchPath"
      touch "$working_path/keyword_history"
      echo "$keywords_diff" >> "$working_path/keyword_history"
      # touch "$working_path/tag_4_test_potentially_false_positive"
      # echo "$keywords_diff" >> "$working_path/tag_4_test_potentially_false_positive"
    fi

    time_complete_b=$(($(date +%s%N)/1000000))
    time_complete_single_run=$((time_complete_b - time_complete_a))
    # echo "time_complete_single_run $time_complete_single_run"

    time_complete=$((time_complete_single_run + time_complete))
    # echo "time_complete $time_complete"

    time_estimated=$((time_complete * all_pdfs_count / pdf_counter))
    time_left=$((time_estimated - time_complete))

    time_left_seconds=$((time_left / 1000))
    time_left_minutes=$((time_left_seconds / 60))
    echo -ne "[$pdf_counter/$all_pdfs_count] Voraussichtliches Ende in < $time_left_minutes min ($(date -d "+$time_left_seconds seconds"))\033[K\r"

    # echo "Gesamtzeit $script: $((time_complete_b - time_complete_a)) ms"

    logInfo "…done"
  fi
done <<< "$all_pdfs"


logInfo "…finished"

cleanup

# notify-send "$(basename "$0")" "finished"

exit 0
